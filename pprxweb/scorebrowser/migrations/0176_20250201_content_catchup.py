# Generated by Django 4.2.7 on 2025-02-02 00:14

from django.db import migrations
from django.db.models import Max



def forward(apps, schema_editor):
    UnlockGroup = apps.get_model("scorebrowser", "UnlockGroup")
    UnlockEvent = apps.get_model("scorebrowser", "UnlockEvent")
    UnlockTask = apps.get_model("scorebrowser", "UnlockTask")
    ChartUnlock = apps.get_model("scorebrowser", "ChartUnlock")
    Chart = apps.get_model("scorebrowser", "Chart")

    def findChart(title, difficulty_id):
        candidates = Chart.objects.filter(song__title=title, difficulty_id=difficulty_id)
        for chart in candidates:
            if chart.song.title == title: # 'take me higher' / 'TAKE ME HIGHER' sql collation woes
                return chart
        return None

    def findCharts(title):
        candidates = Chart.objects.filter(song__title=title).filter(hidden=False).order_by("difficulty_id")
        if candidates.count() == 0:
            raise ValueError("No charts found for {}".format(title))
        return [c for c in candidates if (c.song.title == title)]

    def createExtraSaviors(event, title):
        for chart in findCharts(title):
            task = UnlockTask.objects.create(event=event, name='{} ({} {})'.format(title, chart.difficulty.name, chart.rating), ordering=createExtraSaviors.nextOrdering)
            ChartUnlock.objects.create(task=task, chart=chart, extra=True)
            createExtraSaviors.nextOrdering += 10
    createExtraSaviors.nextOrdering = 0

    ordering = UnlockEvent.objects.aggregate(Max('ordering'))['ordering__max'] + 10
    extraSavior = UnlockGroup.objects.get(name="Extra Savior")
    musicCreator = UnlockEvent.objects.create(
        version_id=20,
        group=extraSavior,
        name="The 1st MUSIC CREATOR AUDITION",
        ordering=ordering,
    )
    createExtraSaviors(musicCreator, "Funky Flux Fusion")
    createExtraSaviors(musicCreator, "No More Love")
    createExtraSaviors(musicCreator, "愛氏AIされ")

    ordering += 10
    bomberman = UnlockEvent.objects.create(
        version_id=20,
        group=extraSavior,
        name="BOMBERMAN",
        ordering=ordering,
    )
    createExtraSaviors(bomberman, "Amazing Bomberman")

    ChartUnlock.objects.create(
        task=UnlockTask.objects.get(name="New Challenge charts (A3+)"),
        chart=findChart("actualization of self (weaponized)", 4)
    )

    advanceBorder = UnlockTask.objects.create(event=UnlockEvent.objects.get(name="WORLD LEAGUE"), name="GOLD CLASS with advanced border", ordering=40)
    def newGoldenLeague(new_title):
        for c in findCharts(new_title):
            ChartUnlock.objects.create(task=advanceBorder, chart=c)

    newGoldenLeague('STOMP!!')

    gpAdvance = UnlockEvent.objects.get(name='GRAND PRIX Advance Play')
    def gpPack(packName, titles):
        gpPack.nextOrdering += 10
        pack = UnlockTask.objects.create(event=gpAdvance, name=packName, ordering=gpPack.nextOrdering)

        for title in titles:
            for difficulty_id in range(4):
                chart = findChart(title, difficulty_id)
                ChartUnlock.objects.create(task=pack, chart=chart)

        return pack
    gpPack.nextOrdering = UnlockTask.objects.filter(event=gpAdvance).aggregate(Max('ordering'))['ordering__max']

    def gpChallenge(packs, charts):
        for pack in packs:
            for chart in charts:
                ChartUnlock.objects.create(task=pack, chart=chart)

    pack = gpPack("BPL S4 music pack", [
        "blue anthem",
        "THUNDERSTRIKE",
        "ESPRIT ONE",
        "Steps for Victory",
        "Wizards!",
        "Get Into The Groove feat.WaMi",
        "メテオラ-meteor-",
        "Mighty Beat Monsterz",
    ])
    gpChallenge([pack], [findChart("Steps for Victory", 4)])



def backward(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('scorebrowser', '0175_forgotten_new_challenge_charts'),
    ]

    operations = [migrations.RunPython(forward, backward)]
